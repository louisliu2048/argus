// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: argus/bpmn/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgDeployFlow struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Data    string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgDeployFlow) Reset()         { *m = MsgDeployFlow{} }
func (m *MsgDeployFlow) String() string { return proto.CompactTextString(m) }
func (*MsgDeployFlow) ProtoMessage()    {}
func (*MsgDeployFlow) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc0ea618a8e6263, []int{0}
}
func (m *MsgDeployFlow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeployFlow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeployFlow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeployFlow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeployFlow.Merge(m, src)
}
func (m *MsgDeployFlow) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeployFlow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeployFlow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeployFlow proto.InternalMessageInfo

func (m *MsgDeployFlow) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeployFlow) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type MsgDeployFlowResponse struct {
	Status int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	FlowId string `protobuf:"bytes,2,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
}

func (m *MsgDeployFlowResponse) Reset()         { *m = MsgDeployFlowResponse{} }
func (m *MsgDeployFlowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeployFlowResponse) ProtoMessage()    {}
func (*MsgDeployFlowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc0ea618a8e6263, []int{1}
}
func (m *MsgDeployFlowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeployFlowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeployFlowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeployFlowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeployFlowResponse.Merge(m, src)
}
func (m *MsgDeployFlowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeployFlowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeployFlowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeployFlowResponse proto.InternalMessageInfo

func (m *MsgDeployFlowResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *MsgDeployFlowResponse) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

type MsgStartFlow struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	FlowId   string `protobuf:"bytes,2,opt,name=flowId,proto3" json:"flowId,omitempty"`
	InitData string `protobuf:"bytes,3,opt,name=initData,proto3" json:"initData,omitempty"`
}

func (m *MsgStartFlow) Reset()         { *m = MsgStartFlow{} }
func (m *MsgStartFlow) String() string { return proto.CompactTextString(m) }
func (*MsgStartFlow) ProtoMessage()    {}
func (*MsgStartFlow) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc0ea618a8e6263, []int{2}
}
func (m *MsgStartFlow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartFlow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartFlow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartFlow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartFlow.Merge(m, src)
}
func (m *MsgStartFlow) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartFlow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartFlow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartFlow proto.InternalMessageInfo

func (m *MsgStartFlow) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgStartFlow) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *MsgStartFlow) GetInitData() string {
	if m != nil {
		return m.InitData
	}
	return ""
}

type MsgStartFlowResponse struct {
	Status     int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	InstanceId string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (m *MsgStartFlowResponse) Reset()         { *m = MsgStartFlowResponse{} }
func (m *MsgStartFlowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStartFlowResponse) ProtoMessage()    {}
func (*MsgStartFlowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc0ea618a8e6263, []int{3}
}
func (m *MsgStartFlowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartFlowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartFlowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartFlowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartFlowResponse.Merge(m, src)
}
func (m *MsgStartFlowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartFlowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartFlowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartFlowResponse proto.InternalMessageInfo

func (m *MsgStartFlowResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *MsgStartFlowResponse) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

type MsgInvokeFlow struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	InstanceId string `protobuf:"bytes,2,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	CallData   string `protobuf:"bytes,3,opt,name=callData,proto3" json:"callData,omitempty"`
}

func (m *MsgInvokeFlow) Reset()         { *m = MsgInvokeFlow{} }
func (m *MsgInvokeFlow) String() string { return proto.CompactTextString(m) }
func (*MsgInvokeFlow) ProtoMessage()    {}
func (*MsgInvokeFlow) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc0ea618a8e6263, []int{4}
}
func (m *MsgInvokeFlow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInvokeFlow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInvokeFlow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInvokeFlow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInvokeFlow.Merge(m, src)
}
func (m *MsgInvokeFlow) XXX_Size() int {
	return m.Size()
}
func (m *MsgInvokeFlow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInvokeFlow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInvokeFlow proto.InternalMessageInfo

func (m *MsgInvokeFlow) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgInvokeFlow) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

func (m *MsgInvokeFlow) GetCallData() string {
	if m != nil {
		return m.CallData
	}
	return ""
}

type MsgInvokeFlowResponse struct {
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgInvokeFlowResponse) Reset()         { *m = MsgInvokeFlowResponse{} }
func (m *MsgInvokeFlowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInvokeFlowResponse) ProtoMessage()    {}
func (*MsgInvokeFlowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc0ea618a8e6263, []int{5}
}
func (m *MsgInvokeFlowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInvokeFlowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInvokeFlowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInvokeFlowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInvokeFlowResponse.Merge(m, src)
}
func (m *MsgInvokeFlowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInvokeFlowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInvokeFlowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInvokeFlowResponse proto.InternalMessageInfo

func (m *MsgInvokeFlowResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type MsgCallEvm struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Contract string `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
	CallData string `protobuf:"bytes,3,opt,name=callData,proto3" json:"callData,omitempty"`
}

func (m *MsgCallEvm) Reset()         { *m = MsgCallEvm{} }
func (m *MsgCallEvm) String() string { return proto.CompactTextString(m) }
func (*MsgCallEvm) ProtoMessage()    {}
func (*MsgCallEvm) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc0ea618a8e6263, []int{6}
}
func (m *MsgCallEvm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCallEvm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCallEvm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCallEvm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCallEvm.Merge(m, src)
}
func (m *MsgCallEvm) XXX_Size() int {
	return m.Size()
}
func (m *MsgCallEvm) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCallEvm.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCallEvm proto.InternalMessageInfo

func (m *MsgCallEvm) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCallEvm) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *MsgCallEvm) GetCallData() string {
	if m != nil {
		return m.CallData
	}
	return ""
}

type MsgCallEvmResponse struct {
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgCallEvmResponse) Reset()         { *m = MsgCallEvmResponse{} }
func (m *MsgCallEvmResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCallEvmResponse) ProtoMessage()    {}
func (*MsgCallEvmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc0ea618a8e6263, []int{7}
}
func (m *MsgCallEvmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCallEvmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCallEvmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCallEvmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCallEvmResponse.Merge(m, src)
}
func (m *MsgCallEvmResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCallEvmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCallEvmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCallEvmResponse proto.InternalMessageInfo

func (m *MsgCallEvmResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgDeployFlow)(nil), "argus.bpmn.MsgDeployFlow")
	proto.RegisterType((*MsgDeployFlowResponse)(nil), "argus.bpmn.MsgDeployFlowResponse")
	proto.RegisterType((*MsgStartFlow)(nil), "argus.bpmn.MsgStartFlow")
	proto.RegisterType((*MsgStartFlowResponse)(nil), "argus.bpmn.MsgStartFlowResponse")
	proto.RegisterType((*MsgInvokeFlow)(nil), "argus.bpmn.MsgInvokeFlow")
	proto.RegisterType((*MsgInvokeFlowResponse)(nil), "argus.bpmn.MsgInvokeFlowResponse")
	proto.RegisterType((*MsgCallEvm)(nil), "argus.bpmn.MsgCallEvm")
	proto.RegisterType((*MsgCallEvmResponse)(nil), "argus.bpmn.MsgCallEvmResponse")
}

func init() { proto.RegisterFile("argus/bpmn/tx.proto", fileDescriptor_0cc0ea618a8e6263) }

var fileDescriptor_0cc0ea618a8e6263 = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xcb, 0x8e, 0xd3, 0x30,
	0x14, 0x86, 0x9b, 0x16, 0x5a, 0x7a, 0x80, 0x8d, 0x81, 0x52, 0xb2, 0x30, 0x25, 0x2b, 0x84, 0x50,
	0x82, 0x0a, 0x0b, 0x36, 0x2c, 0x80, 0x72, 0x69, 0xa5, 0x08, 0xa9, 0xec, 0x10, 0x02, 0xb9, 0x89,
	0x09, 0xd1, 0xb8, 0x71, 0x14, 0x3b, 0xbd, 0xbc, 0xc5, 0xbc, 0xc6, 0xbc, 0xc9, 0x2c, 0xbb, 0x9c,
	0xe5, 0xa8, 0x7d, 0x91, 0x51, 0x3c, 0xb9, 0xf5, 0x9a, 0x5d, 0xfe, 0xff, 0xc4, 0xbf, 0x3f, 0x1d,
	0x9f, 0x03, 0x8f, 0x48, 0xe4, 0xc5, 0xc2, 0x9a, 0x84, 0xd3, 0xc0, 0x92, 0x0b, 0x33, 0x8c, 0xb8,
	0xe4, 0x08, 0x94, 0x69, 0x26, 0xa6, 0xf1, 0x01, 0x1e, 0xda, 0xc2, 0x1b, 0xd0, 0x90, 0xf1, 0xe5,
	0x57, 0xc6, 0xe7, 0xa8, 0x0b, 0x2d, 0x27, 0xa2, 0x44, 0xf2, 0xa8, 0xab, 0xf5, 0xb4, 0x97, 0xed,
	0x71, 0x26, 0x11, 0x82, 0x3b, 0x2e, 0x91, 0xa4, 0x5b, 0x57, 0xb6, 0xfa, 0x36, 0xbe, 0xc3, 0x93,
	0xad, 0xe3, 0x63, 0x2a, 0x42, 0x1e, 0x08, 0x8a, 0x3a, 0xd0, 0x14, 0x92, 0xc8, 0x58, 0xa8, 0x94,
	0xbb, 0xe3, 0x54, 0xa1, 0xa7, 0xd0, 0xfa, 0xc7, 0xf8, 0xfc, 0xaf, 0xef, 0xa6, 0x39, 0xcd, 0x44,
	0x0e, 0x5d, 0xe3, 0x37, 0x3c, 0xb0, 0x85, 0xf7, 0x53, 0x92, 0x48, 0x56, 0x70, 0x74, 0x20, 0x3d,
	0xb3, 0x9d, 0x80, 0x74, 0xb8, 0xe7, 0x07, 0xbe, 0x1c, 0x24, 0x8c, 0x0d, 0x55, 0xc9, 0xb5, 0xf1,
	0x03, 0x1e, 0x97, 0xd3, 0x2b, 0x31, 0x9f, 0xc3, 0x7d, 0x3f, 0x10, 0x92, 0x04, 0x0e, 0x2d, 0x50,
	0x21, 0xb3, 0x86, 0xae, 0x41, 0x55, 0xdf, 0x86, 0xc1, 0x8c, 0x9f, 0xd1, 0x0a, 0x5e, 0x0c, 0xa5,
	0x83, 0xfb, 0x51, 0x09, 0xb7, 0x43, 0x18, 0x2b, 0x73, 0x67, 0xda, 0xb0, 0x54, 0x7f, 0x8b, 0x6b,
	0xaa, 0xc0, 0x8d, 0x3f, 0x00, 0xb6, 0xf0, 0x3e, 0x13, 0xc6, 0xbe, 0xcc, 0xa6, 0x27, 0xa0, 0x92,
	0x4b, 0x79, 0x20, 0x23, 0xe2, 0xc8, 0x14, 0x29, 0xd7, 0x27, 0x81, 0x5e, 0x03, 0x2a, 0xf2, 0xab,
	0x68, 0xfa, 0x17, 0x75, 0x68, 0xd8, 0xc2, 0x43, 0x23, 0x80, 0xd2, 0x88, 0x3d, 0x33, 0x8b, 0x01,
	0x34, 0xb7, 0xc6, 0x47, 0x7f, 0x71, 0xb4, 0x94, 0xdf, 0xf5, 0x0d, 0xda, 0xa5, 0x29, 0xd9, 0xf9,
	0x3f, 0xaf, 0xe8, 0xbd, 0x63, 0x95, 0x3c, 0x68, 0x04, 0x50, 0x7a, 0xbf, 0x5d, 0xa8, 0xa2, 0xb4,
	0x07, 0x75, 0xe0, 0x39, 0x3e, 0x42, 0x2b, 0xeb, 0x79, 0x67, 0xe7, 0xef, 0xd4, 0xd7, 0xf1, 0x61,
	0x3f, 0x8b, 0xf8, 0x34, 0xb8, 0x5c, 0x63, 0x6d, 0xb5, 0xc6, 0xda, 0xf5, 0x1a, 0x6b, 0xe7, 0x1b,
	0x5c, 0x5b, 0x6d, 0x70, 0xed, 0x6a, 0x83, 0x6b, 0xbf, 0x5e, 0x79, 0xbe, 0xfc, 0x1f, 0x4f, 0x4c,
	0x87, 0x4f, 0x2d, 0xc6, 0x63, 0x5f, 0x30, 0x3f, 0xee, 0xbf, 0x79, 0xf7, 0xde, 0xba, 0x5d, 0xee,
	0x45, 0xba, 0xde, 0xcb, 0x90, 0x8a, 0x49, 0x53, 0xad, 0xf8, 0xdb, 0x9b, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x88, 0x70, 0x4c, 0xa2, 0xf9, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	DeployFlow(ctx context.Context, in *MsgDeployFlow, opts ...grpc.CallOption) (*MsgDeployFlowResponse, error)
	StartFlow(ctx context.Context, in *MsgStartFlow, opts ...grpc.CallOption) (*MsgStartFlowResponse, error)
	InvokeFlow(ctx context.Context, in *MsgInvokeFlow, opts ...grpc.CallOption) (*MsgInvokeFlowResponse, error)
	CallEvm(ctx context.Context, in *MsgCallEvm, opts ...grpc.CallOption) (*MsgCallEvmResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) DeployFlow(ctx context.Context, in *MsgDeployFlow, opts ...grpc.CallOption) (*MsgDeployFlowResponse, error) {
	out := new(MsgDeployFlowResponse)
	err := c.cc.Invoke(ctx, "/argus.bpmn.Msg/DeployFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StartFlow(ctx context.Context, in *MsgStartFlow, opts ...grpc.CallOption) (*MsgStartFlowResponse, error) {
	out := new(MsgStartFlowResponse)
	err := c.cc.Invoke(ctx, "/argus.bpmn.Msg/StartFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InvokeFlow(ctx context.Context, in *MsgInvokeFlow, opts ...grpc.CallOption) (*MsgInvokeFlowResponse, error) {
	out := new(MsgInvokeFlowResponse)
	err := c.cc.Invoke(ctx, "/argus.bpmn.Msg/InvokeFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CallEvm(ctx context.Context, in *MsgCallEvm, opts ...grpc.CallOption) (*MsgCallEvmResponse, error) {
	out := new(MsgCallEvmResponse)
	err := c.cc.Invoke(ctx, "/argus.bpmn.Msg/CallEvm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	DeployFlow(context.Context, *MsgDeployFlow) (*MsgDeployFlowResponse, error)
	StartFlow(context.Context, *MsgStartFlow) (*MsgStartFlowResponse, error)
	InvokeFlow(context.Context, *MsgInvokeFlow) (*MsgInvokeFlowResponse, error)
	CallEvm(context.Context, *MsgCallEvm) (*MsgCallEvmResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) DeployFlow(ctx context.Context, req *MsgDeployFlow) (*MsgDeployFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployFlow not implemented")
}
func (*UnimplementedMsgServer) StartFlow(ctx context.Context, req *MsgStartFlow) (*MsgStartFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFlow not implemented")
}
func (*UnimplementedMsgServer) InvokeFlow(ctx context.Context, req *MsgInvokeFlow) (*MsgInvokeFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeFlow not implemented")
}
func (*UnimplementedMsgServer) CallEvm(ctx context.Context, req *MsgCallEvm) (*MsgCallEvmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallEvm not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_DeployFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeployFlow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeployFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/argus.bpmn.Msg/DeployFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeployFlow(ctx, req.(*MsgDeployFlow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StartFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStartFlow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StartFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/argus.bpmn.Msg/StartFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StartFlow(ctx, req.(*MsgStartFlow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InvokeFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInvokeFlow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InvokeFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/argus.bpmn.Msg/InvokeFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InvokeFlow(ctx, req.(*MsgInvokeFlow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CallEvm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCallEvm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CallEvm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/argus.bpmn.Msg/CallEvm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CallEvm(ctx, req.(*MsgCallEvm))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "argus.bpmn.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeployFlow",
			Handler:    _Msg_DeployFlow_Handler,
		},
		{
			MethodName: "StartFlow",
			Handler:    _Msg_StartFlow_Handler,
		},
		{
			MethodName: "InvokeFlow",
			Handler:    _Msg_InvokeFlow_Handler,
		},
		{
			MethodName: "CallEvm",
			Handler:    _Msg_CallEvm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "argus/bpmn/tx.proto",
}

func (m *MsgDeployFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeployFlow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeployFlow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeployFlowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeployFlowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeployFlowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FlowId) > 0 {
		i -= len(m.FlowId)
		copy(dAtA[i:], m.FlowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FlowId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgStartFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartFlow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartFlow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InitData) > 0 {
		i -= len(m.InitData)
		copy(dAtA[i:], m.InitData)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InitData)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FlowId) > 0 {
		i -= len(m.FlowId)
		copy(dAtA[i:], m.FlowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FlowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStartFlowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartFlowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartFlowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InstanceId) > 0 {
		i -= len(m.InstanceId)
		copy(dAtA[i:], m.InstanceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InstanceId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgInvokeFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInvokeFlow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInvokeFlow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CallData) > 0 {
		i -= len(m.CallData)
		copy(dAtA[i:], m.CallData)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CallData)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InstanceId) > 0 {
		i -= len(m.InstanceId)
		copy(dAtA[i:], m.InstanceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InstanceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInvokeFlowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInvokeFlowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInvokeFlowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCallEvm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCallEvm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCallEvm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CallData) > 0 {
		i -= len(m.CallData)
		copy(dAtA[i:], m.CallData)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CallData)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCallEvmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCallEvmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCallEvmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgDeployFlow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeployFlowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	l = len(m.FlowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgStartFlow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FlowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InitData)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgStartFlowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	l = len(m.InstanceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgInvokeFlow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InstanceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CallData)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgInvokeFlowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	return n
}

func (m *MsgCallEvm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CallData)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCallEvmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgDeployFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeployFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeployFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeployFlowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeployFlowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeployFlowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStartFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStartFlowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartFlowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartFlowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInvokeFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInvokeFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInvokeFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInvokeFlowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInvokeFlowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInvokeFlowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCallEvm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCallEvm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCallEvm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCallEvmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCallEvmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCallEvmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
